@using BAWLib
@using BAWLib.Entities
@using BAWLib.ViewModels
@using Bike_Around_Worlds.Components.Pages
@using Domain.Interfaces
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject IHttpContextAccessor HttpContextAccessor

@inject IRepository<Favorite> FavoriteRepository;
@inject IRepository<User> UserRepository;
@inject IRepository<Motorbike> MotorbikeRepository;
@inject NavigationManager NavigationManager


<div class="card bike-element">
    <img src=@ImgOne class="card-img-top" alt="Ein Bild eines Bikes" @onclick="NavToProductView">
    <div class="card-body">
        <h1 @onclick="NavToProductView">@ThisBike!.Manufacturer @ThisBike.Model </h1>
        <p class="card-text"><span class="price">@ThisBike.CurrentLeasingRate</span> /Tag</p>
        <div class="d-flex justify-content-between m align-content-end justify-content-end">
            <p class="federal-state pb-0 mb-0">#@ThisBike.Federal_State</p>

            <i class="bi mb-0 pb-0 @Icon " style="font-size: 1.25rem;" @onclick="ChangeIcon"></i>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<bool> Alert { get; set; }
    [Parameter] public EventCallback<string> AlertMessage { get; set; }
    [Parameter] public EventCallback<bool> IsError { get; set; }
    [Parameter] public string? ImgOne { get; set; }
    [Parameter] public string? ImgTwo { get; set; }
    [Parameter] public string? ImgThree { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public Motorbike? ThisBike { get; set; }
    [Parameter] public bool IsFavorite { get; set; }
    public List<Favorite>? Favorites { get; set; }
    private Favorite? Favorite { get; set; }
    public List<User>? Users { get; set; }
    private string? UserName;
    
    public List<User> CurrentUser { get; set; } = new();
    
    protected override void OnInitialized()
    {
        
        base.OnInitialized();
        Favorites = FavoriteRepository.ReadAll();
        var user = HttpContextAccessor.HttpContext?.User;
        UserName = user.FindFirst(ClaimTypes.Name)?.Value;
        CurrentUser = UserRepository.Read(u => u.Username == UserName);
       
    }
    
    private void ChangeIcon()
    {
        Icon = Icon == "bi-star" ? "bi-star-fill" : "bi-star";

        try
        {
            if (ThisBike!.IsFavorite)
            {
                FavoriteRepository.Delete(ThisBike!.Motorbike_ID, CurrentUser[0].User_Id);
                ThisBike.IsFavorite = false;
                MotorbikeRepository.Update(ThisBike);
                SendAlert("Bike aus Favoriten erfolgreich entfernt!", true);
                
            }
            else
            {
                Favorite = new Favorite() { Motorbike_ID = ThisBike.Motorbike_ID, User_ID = CurrentUser[0].User_Id };
                FavoriteRepository.Create(Favorite);
                ThisBike!.IsFavorite = true;
                MotorbikeRepository.Update(ThisBike);
                SendAlert("Bike zu Favoriten erfolgreich hinzugef√ºgt!", true);
            }
        }
        catch
        {
            SendError("Bitte vorher anmelden!", true);
        }



    }

    private void NavToProductView()
    {
        NavigationManager.NavigateTo($"product/{ThisBike!.Motorbike_ID}");
    }

    private async Task SendAlert(string message, bool alerti)
    {
        await Alert.InvokeAsync(alerti);
        await AlertMessage.InvokeAsync(message);
    }

    private async Task SendError(string message, bool error)
    {
        await AlertMessage.InvokeAsync(message);
        await IsError.InvokeAsync(error);
    }
}