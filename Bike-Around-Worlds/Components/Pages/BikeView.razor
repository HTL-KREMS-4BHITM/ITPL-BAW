@page "/bikeView"
@using System.Security.Claims
@using BAWLib
@using BAWLib.Classes
@using BAWLib.Entities
@using Bike_Around_Worlds.Components.Blazor_Components
@using Domain.Interfaces
@rendermode InteractiveServer
@inject IRepository<Motorbike> BikeRepository;
@inject IRepository<LeasingContract> LeasingContractRepository;
@inject IRepository<Favorite> FavoritesRepository;
@inject IRepository<User> UserRepository;
@inject IHttpContextAccessor HttpContextAccessor;


<PageTitle>Bikes</PageTitle>
<div class="row" style="background-color: #2c2c2c">
    @if (_alert)
    {
        <div class="alert alert-success alert-dismissible fade show custom-alert" role="alert">
            @_alertmessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    else if (_iserror)
    {
        <div class="alert alert-danger alert-dismissible fade show custom-alert" role="alert">
            @_alertmessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    

    <div class="col-lg-3 col-sm-12 col-md-12">
        <FilterComponent OnDataSend="ReceiveData"></FilterComponent>
    </div>
    <div class="col-lg-9 col-md-12 col-sm-12">
        <div class="row g-5 mb-5">
   
            @foreach (var bike in _bikes)
            {

                <div class="col-lg-3 col-sm-12 col-md-6">
                    <AuthorizeView>
                        <Authorized>
                            @if (_favorites.Contains(new Favorite() { Motorbike_ID = bike.Motorbike_ID, User_ID = CurrentUser[0].User_Id }))
                            {
                                <BikeComponent ThisBike=@bike CurrentUser_Id=@CurrentUser[0].User_Id Icon="bi-star-fill" ImgOne="/Resources/Bikes/bike4.jpg" Alert="ReceivedBool" AlertMessage="ReceivedAlert" IsError="ReceiveError"></BikeComponent>
                            }
                            else
                            {
                                <BikeComponent ThisBike=@bike Icon="bi-star" CurrentUser_Id=@CurrentUser[0].User_Id ImgOne="/Resources/Bikes/bike4.jpg" Alert="ReceivedBool" AlertMessage="ReceivedAlert" IsError="ReceiveError"></BikeComponent>
                            }
                        </Authorized>
                        <NotAuthorized>
                            <BikeComponent ThisBike=@bike Icon="bi-star" ImgOne="/Resources/Bikes/bike4.jpg" Alert="ReceivedBool" AlertMessage="ReceivedAlert" IsError="ReceiveError"></BikeComponent>
                        </NotAuthorized>
                    </AuthorizeView>

                </div>
            }
        </div>
    </div>
    <nav aria-label="Page navigation example" class="d-flex justify-content-center">
        <ul class="pagination">
            <li class="page-item"><a class="page-link" href="#">Prev</a></li>
            <li class="page-item active"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item"><a class="page-link" href="#">4</a></li>
            <li class="page-item"><a class="page-link" href="#">Next</a></li>
        </ul>
    </nav>
</div>






@code {
    private List<Motorbike> _bikes = new();
    private List<Motorbike> _reverenceBikes = new();
    private List<LeasingContract> _leasingContracts = new();
    private List<Favorite> _favorites = new();
    
    private Filter ReceivedData { get; set; } = new Filter();
    private string? _alertmessage;
    private bool _alert;
    private bool _iserror;

    public string? UserName { get; set; }
    public List<User> CurrentUser { get; set; } = new();


    
    
    
    
    
    
    
    
    
    
    
    
    private void ReceiveData(Filter data)
    {
        ReceivedData = data;

        _bikes = FilterBikes(ReceivedData);
        
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _reverenceBikes = BikeRepository.ReadAll();
        _leasingContracts = LeasingContractRepository.ReadAll();
        _bikes = _reverenceBikes;
        var user = HttpContextAccessor.HttpContext?.User;
        UserName = user!.FindFirst(ClaimTypes.Name)?.Value;
        CurrentUser = UserRepository.Read(u => u.Username == UserName);
        if (CurrentUser.Count() != 0)
        {
        _favorites = FavoritesRepository.Read(favorite => favorite.User_ID == CurrentUser[0].User_Id);
        }
        
    }

    private void ReceivedAlert(string message)
    {
        _alertmessage = message;
        _alert = true;

        Task.Delay(5000).ContinueWith(_ =>
        {
            _alert = false;
            InvokeAsync(StateHasChanged); 
        });
    }


    private void ReceivedBool(bool alert)
    {
        _alert = alert; 
    }
    
    private void ReceiveError(bool error)
    {
        _iserror = error;
    }
    
    
    
    
    
    

    #region Filtering

    private List<Motorbike> FilterBikes(Filter data)
    {
        List<Motorbike> returnBikes = new();

        if (data.Regions.Count!=0 && data.Brands.Count() ==0)
        {
            foreach (Motorbike bike in _reverenceBikes)
            {
                if (data.Regions.Contains(bike.Federal_State) && bike.CurrentLeasingRate <= data.Price && bike.Ps >= data.HorsePower)
                {
                    returnBikes.Add(bike);
                }
            }
        }
        if (data.Brands.Count!=0 && data.Regions.Count() ==0)
        {
            foreach (Motorbike bike in _reverenceBikes)
            {
                
                if (data.Brands.Contains(bike.Manufacturer)&& bike.CurrentLeasingRate <= data.Price && bike.Ps >= data.HorsePower)
                {
                    returnBikes.Add(bike);
                }
            }
        }
        if (data.Regions.Count==0 && data.Brands.Count==0)
        {
            foreach (Motorbike bike in _reverenceBikes)
            {
                if (bike.CurrentLeasingRate <= data.Price && bike.Ps >= data.HorsePower)
                {
                    returnBikes.Add(bike);
                }
            }
        }

        if (data.Regions.Count() != 0 && data.Brands.Count() != 0)
        {
            foreach (Motorbike bike in _reverenceBikes)
            {
                if (data.Brands.Contains(bike.Manufacturer) && data.Regions.Contains(bike.Federal_State)&& bike.CurrentLeasingRate <= data.Price && bike.Ps >= data.HorsePower)
                {
                    returnBikes.Add(bike);
                }
            }
        }

        foreach (LeasingContract leasingContract in _leasingContracts)
        {
            if (returnBikes.Contains(leasingContract.Motorbike))
            {
                if ((DateOnly.FromDateTime(leasingContract.TO_DATE) >= data.To && DateOnly.FromDateTime(leasingContract.FROM_DATE) <= data.To) || (DateOnly.FromDateTime(leasingContract.FROM_DATE) <= data.From && DateOnly.FromDateTime(leasingContract.TO_DATE) >= data.From) || (DateOnly.FromDateTime(leasingContract.FROM_DATE) >= data.From && DateOnly.FromDateTime(leasingContract.TO_DATE) <= data.To))
                    returnBikes.Remove(leasingContract.Motorbike);
            }
        }
        return returnBikes;
    }

    #endregion
}
