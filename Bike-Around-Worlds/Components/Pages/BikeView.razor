@page "/BikeView"
@using BAWLib
@using Bike_Around_Worlds.Components.Blazor_Components
@using Domain.Interfaces
@using Domain.Repositories
@rendermode InteractiveServer
@inject IRepository<Motorbike> BikeRepository;
@inject IJSRuntime js

<PageTitle>Bikes</PageTitle>


<AuthorizeView> 
    <Authorized>
        <button class="btn btn-outline-danger" @onclick="DisplayGreeting">Display</button>
    </Authorized>
</AuthorizeView>

<div class="row "style="background-color: #2c2c2c">
    <div class="col-lg-3 col-sm-12 col-md-12">
        <FilterComponent></FilterComponent>
    </div>
    <div class="col-lg-9 col-md-12 col-sm-12">
        <div class="row g-5 mb-5">
            

            @foreach (var bike in _bikes)
            {
                <div class="col-lg-3 col-sm-12 col-md-6">
                    <BikeComponent ThisBike=@bike ImgOne="/Resources/Bikes/bike4.jpg"></BikeComponent>
                </div>
            }
        </div>
    </div>
    <nav aria-label="Page navigation example" class="d-flex justify-content-center">
        <ul class="pagination">
            <li class="page-item"><a class="page-link" href="#">Prev</a></li>
            <li class="page-item active"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item"><a class="page-link" href="#">4</a></li>
            <li class="page-item"><a class="page-link" href="#">Next</a></li>
        </ul>
    </nav>
</div>






@code {
    
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    private List<Motorbike> _bikes = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _bikes = BikeRepository.ReadAll();
    }

    private async Task DisplayGreeting()
    {
        var authenticationState = await authState;
        var message = $"Hello {authenticationState.User.Identity.Name}";
        await js.InvokeVoidAsync("alert", message);
        
    }

}