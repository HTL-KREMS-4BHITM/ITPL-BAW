@page "/favoritesView"
@using System.Security.Claims
@using BAWLib
@using BAWLib.Classes
@using BAWLib.Entities
@using Bike_Around_Worlds.Components.Blazor_Components
@using Domain.Interfaces
@using Domain.Repositories
@rendermode InteractiveServer


@inject IRepository<LeasingContract> LeasingContractRepository;
@inject IRepository<Motorbike> MotorbikeRepository;
@inject IRepository<Favorite> FavoritesRepository;
@inject IRepository<User> UserRepository;
@inject IHttpContextAccessor HttpContextAccessor;
<style>
    .custom-alert {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1050; 
        width: 300px; 
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); 
    }
</style>

<div class="row" style="background-color: #2c2c2c">
    <div class="col-lg-3 col-sm-12 col-md-12">
        <FilterComponent OnDataSend="ReceiveData"></FilterComponent>




    </div>
    <div class="col-lg-9 col-md-12 col-sm-12">
        <div class="row g-5 mb-5">
            @if (_alert)
            {
                <div class="alert alert-success alert-dismissible fade show custom-alert" role="alert">
                    @_alertmessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            @foreach (var bike in _bikes)
            {
                <div class="col-lg-3">
                    <BikeComponent ThisBike=@bike Icon="bi-star-fill" ImgOne="/Resources/Bikes/bike4.jpg" Alert="ReceivedBool" AlertMessage="ReceivedAlert"></BikeComponent>
                </div>
            }

        </div>
    </div>
    <nav aria-label="Page navigation example" class="d-flex justify-content-center">
        <ul class="pagination">
            <li class="page-item"><a class="page-link" href="#">Prev</a></li>
            <li class="page-item active"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item"><a class="page-link" href="#">4</a></li>
            <li class="page-item"><a class="page-link" href="#">Next</a></li>
        </ul>
    </nav>
</div>






@code {
    private List<Motorbike> _bikes = new();

    private List<Motorbike> _reverenceBikes = new();
    private List<Favorite> _favorites = new();
    private List<LeasingContract> _leasingContracts = new();
    private string? _alertmessage;
    private bool _alert;
    private string UserName;
    private List<User> CurrentUser = new();


    private void ReceiveData(Filter data)
    {
        _bikes = FilterBikes(data);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var user = HttpContextAccessor.HttpContext?.User;
        UserName = user!.FindFirst(ClaimTypes.Name)?.Value;
        CurrentUser = UserRepository.Read(u => u.Username == UserName);
        _favorites = FavoritesRepository.Read(favorite => favorite.User_ID == CurrentUser[0].User_Id);

        foreach (var bike in _favorites)
        {
            _reverenceBikes.Add(MotorbikeRepository.Read(bike.Motorbike_ID));
        }
        _leasingContracts = LeasingContractRepository.ReadAll();
        _bikes = _reverenceBikes;
    }

    
    private void ReceivedAlert(string message)
    {
        _alertmessage = message;
        _alert = true;

        Task.Delay(5000).ContinueWith(_ =>
        {
            _alert = false;
            InvokeAsync(StateHasChanged); 
        });
    }


    private void ReceivedBool(bool alertb)
    {
        _alert = alertb;
    }
    
    
    #region Filtering

    

    private List<Motorbike> FilterBikes(Filter data)
    {
        List<Motorbike> returnBikes = new();

        if (data.Regions.Count!=0 && data.Brands.Count() ==0)
        {
            foreach (Motorbike bike in _reverenceBikes)
            {
                if (data.Regions.Contains(bike.Federal_State) && bike.CurrentLeasingRate <= data.Price && bike.Ps >= data.HorsePower)
                {
                    returnBikes.Add(bike);
                }
            }
        }
        if (data.Brands.Count!=0 && data.Regions.Count() ==0)
        {
            foreach (Motorbike bike in _reverenceBikes)
            {
                
                if (data.Brands.Contains(bike.Manufacturer)&& bike.CurrentLeasingRate <= data.Price && bike.Ps >= data.HorsePower)
                {
                    returnBikes.Add(bike);
                }
            }
        }
        if (data.Regions.Count==0 && data.Brands.Count==0)
        {
            foreach (Motorbike bike in _reverenceBikes)
            {
                if (bike.CurrentLeasingRate <= data.Price && bike.Ps >= data.HorsePower)
                {
                    returnBikes.Add(bike);
                }
            }
        }

        if (data.Regions.Count() != 0 && data.Brands.Count() != 0)
        {
            foreach (Motorbike bike in _reverenceBikes)
            {
                if (data.Brands.Contains(bike.Manufacturer) && data.Regions.Contains(bike.Federal_State)&& bike.CurrentLeasingRate <= data.Price && bike.Ps >= data.HorsePower)
                {
                    returnBikes.Add(bike);
                }
            }
        }

        
        
        foreach (LeasingContract leasingContract in _leasingContracts)
        {
            if (returnBikes.Contains(leasingContract.Motorbike))
            {
                if ((DateOnly.FromDateTime(leasingContract.TO_DATE) >= data.To && DateOnly.FromDateTime(leasingContract.FROM_DATE) <= data.To) || (DateOnly.FromDateTime(leasingContract.FROM_DATE) <= data.From && DateOnly.FromDateTime(leasingContract.TO_DATE) >= data.From) || (DateOnly.FromDateTime(leasingContract.FROM_DATE) >= data.From && DateOnly.FromDateTime(leasingContract.TO_DATE) <= data.To))
                    returnBikes.Remove(leasingContract.Motorbike);
            }
        }
        return returnBikes;
    }

    #endregion
    

}
