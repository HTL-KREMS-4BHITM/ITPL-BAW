@page "/login"
@rendermode InteractiveServer
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using BAWLib.Configs
@using BAWLib.ViewModels
@inject MotorContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<div class="section-login py-5">ö
    <div class="container">
        <h3 class="text-center mb-4">Login</h3>
        <div class="row justify-content-center align-items-stretch">
            <div class="col-lg-4 d-flex me-0 ps-0 pe-0 border border-end-0 align-items-center">
                <img src="Resources/login.jpeg" class="img-fluid shadow form-height" alt="Bike Pic">
            </div>
            <div class="login_container col-lg-4 ms-0 me-0 ps-0 pe-0 h-100">

            <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm" class="p-4 border rounded shadow">
            <div class="mb-4 mt-5 pt-4 border-bottom border-secondary">
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Benutzername" />
                <ValidationMessage For="() => Model.Username" />
            </div>
            <div class="mb-5 mt-3 border-bottom border-secondary">
                <InputText @bind-Value="Model.Password" type="password" class="form-control" placeholder="Passwort" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-flex justify-content-center">
                <span><a href="/signup">Konto erstellen</a></span>
            </div>
            
            <div class="mb-3">
                <button type="submit" class="w-50 btn text-light w-100 mb-5 mt-3 pb-2">Login</button>
            </div>
        </EditForm>
    </div></div></div>
</div>

@code {
    public LoginViewModel Model { get; set; } = new();
    private string? errorMessage;

    private async Task Authenticate()
    {
        try
        {
            // Benutzer in der Datenbank suchen
            var userAccount = DbContext.Users.FirstOrDefault(x => x.Username == Model.Username);
            if (userAccount is null || userAccount.Password != Model.Password)
            {
                errorMessage = "Invalid Username or Password";
                return;
            }

            // Benutzer authentifizieren
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, userAccount.Username),
            };
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            // Authentifizierungsmethode in Middleware ausführen
            await AuthenticateUser(principal);

            // Nach erfolgreicher Authentifizierung weiterleiten
            NavigationManager.NavigateTo("/bikeview");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    private async Task AuthenticateUser(ClaimsPrincipal principal)
    {
        // Zugriff auf HttpContext sicherstellen
        if (HttpContextAccessor.HttpContext is not null)
        {
            /*await HttpContextAccessor.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, new AuthenticationProperties
            {
                IsPersistent = true,
                ExpiresUtc = DateTime.UtcNow.AddHours(1)
            });*/
        }
        else
        {
            throw new InvalidOperationException("Failed to access HttpContext for authentication.");
        }
    }
}
