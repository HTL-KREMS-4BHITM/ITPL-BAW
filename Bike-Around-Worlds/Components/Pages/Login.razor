@page "/login"
@rendermode InteractiveServer
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using BAWLib.Configs
@using BAWLib.ViewModels
@inject MotorContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-lg-4">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <div class="mb-3">
                <span>Don't have an account? <a href="/signup">Signup</a></span>
                <h1>LOGIN</h1>
            </div>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.Username" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" type="password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public LoginViewModel Model { get; set; } = new();
    private string? errorMessage;

    private async Task Authenticate()
    {
        try
        {
            // Benutzer in der Datenbank suchen
            var userAccount = DbContext.Users.FirstOrDefault(x => x.Username == Model.Username);
            if (userAccount is null || userAccount.Password != Model.Password)
            {
                errorMessage = "Invalid Username or Password";
                return;
            }

            // Benutzer authentifizieren
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, userAccount.Username),
            };
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            // Authentifizierungsmethode in Middleware ausf√ºhren
            await AuthenticateUser(principal);

            // Nach erfolgreicher Authentifizierung weiterleiten
            NavigationManager.NavigateTo("/bikeview");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    private async Task AuthenticateUser(ClaimsPrincipal principal)
    {
        // Zugriff auf HttpContext sicherstellen
        if (HttpContextAccessor.HttpContext is not null)
        {
            /*await HttpContextAccessor.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, new AuthenticationProperties
            {
                IsPersistent = true,
                ExpiresUtc = DateTime.UtcNow.AddHours(1)
            });*/
        }
        else
        {
            throw new InvalidOperationException("Failed to access HttpContext for authentication.");
        }
    }
}
