@page "/FindGroup"
@using BAWLib
@using BAWLib.Classes
@using Bike_Around_Worlds.Components.Blazor_Components
@using Domain.Interfaces
@rendermode InteractiveServer
@inject IRepository<Groups> GroupRepository

<PageTitle>Gruppen</PageTitle>

<section class="se-group">
    <div class="row">
        <div class="col-3">
            <GroupFilterComponent OnDataSend="ReceiveData"></GroupFilterComponent>
        </div>
        <div class="col-9">
            <div class="row">
                @foreach (var group in Groups!)
                {
                    <div class="col-4">
                        <GroupComponent Group=group></GroupComponent>
                    </div>
                }
            </div>
        </div>
    </div>
</section>




@code {
    private List<Groups>? Groups = new();
    private List<Groups>? _reverenceGroups = new();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _reverenceGroups = GroupRepository.ReadAll();
        Groups = _reverenceGroups;
    }
    
    private GroupFilter ReceivedData { get; set; } = new();

    private void ReceiveData(GroupFilter data)
    {
        ReceivedData = data;

        Groups = FilterGroups(ReceivedData);
        StateHasChanged();
    }

    #region Filtering

    private List<Groups> FilterGroups(GroupFilter data)
    {
        List<Groups> returnGroups = new();
        if (data.Regions!.Count() != 0)
        {
            foreach (Groups group in _reverenceGroups!)
            {
                if (data.Regions!.Contains(group.Federal_State) && data.GroupMembersCount <= group.Members.Count)
                {
                    returnGroups.Add(group);
                }
                
            }
        }


        if (data.Regions!.Count==0)
        {
            foreach (Groups group in _reverenceGroups!)
            {
                if (data.GroupMembersCount <= group.Members.Count)
                {
                    returnGroups.Add(group);
                }
            }
        }
        return returnGroups;
    }

    #endregion
    
}