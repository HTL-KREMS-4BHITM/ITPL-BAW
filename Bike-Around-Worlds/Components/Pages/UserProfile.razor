@page "/userprofile"
@page "/userprofile/{view}"
@using BAWLib
@using Domain.Interfaces
@using Bike_Around_Worlds.Components.Blazor_Components
@inject NavigationManager NavigationManager
@inject IRepository<User> UserRepository
@inject IRepository<LeasingContract> LeasingContractRepository
@inject IRepository<GroupMembers_JT> GroupMembersRepository
@using System.Security.Claims
@using BAWLib.Entities
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer

<div class="container section-userprof">
    <div class="row mt-3 mb-5">
        <div class="col-12 d-flex justify-content-center">
            <h3>UserProfile</h3>
        </div>
    </div>
    <div class="row align-items-stretch mb-lg-5">
        <div class="col-lg-6 d-flex flex-column justify-content-start">
            <div class="mb-3">
                <label for="username" class="form-label">Benutzername</label>
                <input type="text" class="form-control" id="username" placeholder="@CurrentUser.Username" >
            </div>
            <div class="mb-3">
                <label for="age" class="form-label">Age</label>
                <input type="text" class="form-control" id="age" placeholder="@CurrentUser.Age">
            </div>
            <div class="mb-3">
                <label for="passwort" class="form-label">Passwort</label>
                <input type="password" class="form-control" id="passwort" placeholder="*************">
            </div>
        </div>

        <div class="col-lg-6 d-flex align-items-center justify-content-center d-flex align-items-baseline">
            <div class="circle-profile w-100 h-100 position-relative">
                <img src="/Resources/User Profile Pics/@imagename" alt="Profile Picture" />
            </div>
            <div @onclick="OpenModal">
                <i class="bi mb-0 pb-0 bi-pen" style="font-size: 1.25rem;"></i>
            </div>
        </div>
    </div>

    @if (isModalVisible)
    {
        <div class="modal fade show custommodal" style="display: block;" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">WÃ¤hlen Sie ein Profilbild</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            @for (int i = 1; i <= 32; i++)
                            {
                                string image = "b (" + @i + ").png";
                                <div class="col-3 mb-3">
                                    <div class="profile-image-select" @onclick="() => SelectProfilePicture(image)">
                                        <img src="/Resources/User Profile Pics/@image" alt="Profile Image" class="img-fluid rounded-circle" />
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Abbrechen</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row border-top">
        <div class="col-lg-6">
            <div class="row d-flex align-items-end mt-lg-4 mb-lg-4">    
                <a class="@(view == "past" ? "" : "text-warning")" href="/userprofile/current">Aktuelle</a>
                </div>
        </div>
        <div class="col-lg-6 d-flex align-items-end">
            <div class="row d-flex align-items-end mt-lg-4 mb-lg-4">
                <a class="@(view == "past" ? "text-warning" : "")" href="/userprofile/past">Vergangene</a>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="row mb-lg-5 d-flex flex-row w-100">
                @foreach (var ls in currentcontracts)
                {
                    <div class="col-lg-3 mb-3">
                        <ContractsComponent CurrentUser=@CurrentUser MotorbikeID=@ls.MotorbikeID CurrentLeasingContract=ls></ContractsComponent>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="row border-top">
        <div class="row mt-lg-4 mb-4 ">
            <span class="col-6">
                <h5>Deine Gruppen</h5>
            </span>
            <span class="col-6 d-flex flex-row justify-content-end">
                <a class="btn btn-primary groupsbtn border-0" href="http://localhost:5215/CreateGroup">Gruppe erstellen</a>
            </span>
        </div>
        <div class="row ">
                    @foreach (var group in Groups)
                    {
                        <div class="col-lg-4">
                            <GroupComponent GroupID=@group.Group_ID></GroupComponent>
                        </div>

                }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? view { get; set; }
    private bool isModalVisible = false;
    private List<Groups> CurrentGroups = new();
    private List<LeasingContract> currentcontracts = new();
    private string imagename;
    private List<User> LoggedUser = new();
    private User CurrentUser = new();
    private List<GroupMembers_JT> Groups = new();
    private string UserName;
    private string selectedimage;             

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var user = HttpContextAccessor.HttpContext?.User;
        UserName = user.FindFirst(ClaimTypes.Name)?.Value;
        LoggedUser = UserRepository.Read(u => u.Username == UserName);
        CurrentUser = LoggedUser[0];
        imagename = CurrentUser.PicAddress;
        Groups = GroupMembersRepository.Read(gm => gm.User_ID == CurrentUser.User_Id);
        UpdateContractsBasedOnView();
    }
 
    private void OpenModal()
    {
        isModalVisible = true;  
    }

    private void CloseModal()
    {
        isModalVisible = false;  
    }

    private void SelectProfilePicture(string image)
    {
        imagename  = image;  
        isModalVisible = false;  
        SaveProfilePicture();    
    }

    private void SaveProfilePicture()
    {
        User changed = new()
        {
            User_Id = CurrentUser.User_Id,
            Username = CurrentUser.Username,
            Password = CurrentUser.Password,
            Groups = CurrentUser.Groups,
            PicAddress = imagename
        };
        
        UserRepository.Update(changed);
        Console.WriteLine($"Das Bild {imagename} wurde gespeichert.");
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateContractsBasedOnView();
        StateHasChanged(); 
    }


    private void UpdateContractsBasedOnView()
    {
        if (view == "past")
        {
            ShowPastContracts();
        }
        else
        {
            ShowCurrentContracts();
        }
    }

    private void ShowCurrentContracts()
    {
        currentcontracts = LeasingContractRepository.Read(l => l.UserID == LoggedUser[0].User_Id && l.TO_DATE > DateTime.Today).ToList();
    }

    private void ShowPastContracts()
    {
        currentcontracts = LeasingContractRepository.Read(l => l.UserID == LoggedUser[0].User_Id && l.TO_DATE <= DateTime.Today).ToList();
    }
    
}
