@page "/userprofile"
@page "/userprofile/{view}"
@using System.Text.RegularExpressions
@using BAWLib
@using Domain.Interfaces
@using Bike_Around_Worlds.Components.Blazor_Components
@inject NavigationManager NavigationManager
@inject IRepository<User> UserRepository
@inject IRepository<LeasingContract> LeasingContractRepository
@inject IRepository<GroupMembers_JT> GroupMembersRepository
@using System.Security.Claims
@using BAWLib.Entities
@inject IHttpContextAccessor HttpContextAccessor

<div class="container section-userprof">
    <div class="row mt-3 mb-5">
        <div class="col-12 d-flex justify-content-center">
            <h3>UserProfile</h3>
        </div>
    </div>
    <div class="row align-items-stretch mb-lg-5">
        <div class="col-lg-6 d-flex flex-column justify-content-start">
            <div class="mb-3">
                <label for="username" class="form-label">Benutzername</label>
                <input type="text" class="form-control" id="username" placeholder="@CurrentUser.Username">
            </div>
            <div class="mb-3">
                <label for="age" class="form-label">Age</label>
                <input type="text" class="form-control" id="age" placeholder="@CurrentUser.Age">
            </div>
            <div class="mb-3">
                <label for="passwort" class="form-label">Passwort</label>
                <input type="password" class="form-control" id="passwort" placeholder="@CurrentUser.Password">
            </div>
        </div>

        <div class="col-lg-6 d-flex align-items-center justify-content-center d-flex align-items-baseline">
            <div class="circle-profile w-100 h-100 position-relative">
                <img src="/Resources/User Profile Pics/@imagename" alt="Profile Picture" />
            </div>
            <a href="http://localhost:5215/userprofile/edit"><i class="bi mb-0 pb-0 bi-pen" style="font-size: 1.25rem;"></i></a>
        </div>
    </div>

    <div class="row border-top">
        <div class="col-lg-6">
            <div class="row d-flex align-items-end mt-lg-4 mb-lg-4">
                <a href="http://localhost:5215/userprofile/current">Aktuelle</a>
                </div>
        </div>
        <div class="col-lg-6 d-flex align-items-end">
            <div class="row d-flex align-items-end mt-lg-4 mb-lg-4">
                <a href="http://localhost:5215/userprofile/past">Vergangene</a>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="row mb-lg-5 d-flex flex-row w-100">
                @foreach (var ls in currentcontracts)
                {
                    <div class="col-lg-3 mb-3">
                        <ContractsComponent CurrentUser=@CurrentUser MotorbikeID=@ls.MotorbikeID CurrentLeasingContract=ls></ContractsComponent>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="row border-top">
        <div class="row mt-lg-4 mb-4">
            <span>
                <h5>Deine Gruppen</h5>
            </span>
            <span>
                <a href="http://localhost:5215/BikeView">Gruppe erstellen</a>
            </span>
        </div>
        <div class="col-lg-4 ">
            @foreach (var group in Groups)
            {
                <GroupComponent GroupID=@group.Group_ID></GroupComponent>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? view { get; set; }

    private List<Groups> CurrentGroups = new();
    private List<LeasingContract> currentcontracts = new();
    private string imagename;
    private List<User> LoggedUser = new();
    private User CurrentUser = new();
    private List<GroupMembers_JT> Groups = new();
    private string UserName;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var user = HttpContextAccessor.HttpContext?.User;
        UserName = user.FindFirst(ClaimTypes.Name)?.Value;
        LoggedUser = UserRepository.Read(u => u.Username == UserName);
        CurrentUser = LoggedUser[0];
        imagename = CurrentUser.PicAddress;
        Groups = GroupMembersRepository.Read(gm => gm.User_ID == CurrentUser.User_Id);
        UpdateContractsBasedOnView();
    }
 

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateContractsBasedOnView();
        StateHasChanged(); 
    }


    private void UpdateContractsBasedOnView()
    {
        if (view == "past")
        {
            ShowPastContracts();
        }
        else
        {
            ShowCurrentContracts();
        }
    }

    private void ShowCurrentContracts()
    {
        currentcontracts = LeasingContractRepository.Read(l => l.UserID == 2 && l.TO_DATE > DateTime.Today).ToList();
    }

    private void ShowPastContracts()
    {
        currentcontracts = LeasingContractRepository.Read(l => l.UserID == 2 && l.TO_DATE <= DateTime.Today).ToList();
    }
/*
    private void NavigateToView(string targetView)
    {
        Console.WriteLine($"Navigating to: /userprofile/{targetView}");*/
    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/BikeView");
    }
}
